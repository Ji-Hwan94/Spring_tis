스프링부트
: 소규모

스프링MVC
: 대규모

-----------------------------------------------------------------------------------------------------------------------

스프링 책에서 사용하는 기술
jQuery + bootstrap + 스프링MVC + MyBatis(SQL을 처리해주는 라이브러리) + Maven(라이브러리를 관리, 다수의 사람들과 협력 용이) + lombok(코드를 자동화 시켜주는 라이브러리) + HikariCP

Objectives 
스프링의 개발 환경 (STS혹은 Eclipse, Lombok 등)
오라클 데이터베이스 설치 및 계정 설정
스프링과 MyBatis의 연동 설정
스프링 MVC의 구성 설정 및 테스트

MVC 순서
1. db 테이블 생성
2. vo 작성 - db에 있는 값들을 vo에 담아서 작성 / vo에서 db에 전달 할때도 먼저 vo에 parameter를 담아서 db에 전달(model)
3. dao 작성 (dbmanager) <- c, r, u, d를 여기서 진행한다.
4. controller 작성 - jsp에서 jsp로 갈때 직접적으로 가는 것이 아니라 controller를 거쳐서 가야한다.(send redirect) (servlet / 주소는 .do)
5. view 작성 (jsp)

Spring은 위의 MVC 패턴에서 나오는 불편함을 줄어준다. (vo에 parameter를 저장하는 것 / controller를 거쳐서 jsp로 넘어가는 것 자동화)

-----------------------------------------------------------------------------------------------------------------------

Maven
: 라이브러리 버젼 관리. 형상 관리
=> pom.xml에 라이브러리 등록. pom.xml을 참고해서 mavenrepositary 서버에서 자동 다운로드 및 설치
**** Maven이 작업하다 에러가 나서 프로젝트가 에러가 나는 경우(소스 코드가 멀쩡할 때)
=> sts 종료(ecplise 등등) -> .m2 폴더 삭제 -> sts 다시 시작 -> Maven이 처음부터 라이브러리 다운로드

------------------------------------------------------------------------------------------------------------------------

spring을 시작할때 jsp와 달리 프로젝트 파일을 실행 시켜야한다.(jsp파일을 바로 실행시키면 에러가 난다.)

----------------------------------------------------------------------------------------------------------------------------

Lombok
=> VO생성시 getter, setter를 자동으로 생성해준다.
=> 최근에 사용자가 점점 늘어나고 있음. 
    그러나, 사용하지 않는 개발자도 있기 때문에 getter, setter 수동 생성 사용도 알아두어야 한다.
=> 처음 설치는 sts당 한번만 하면된다. 그 후 프로젝트마다 필요하면, porm.xml에 등록한다.

------------------------------------------------------------------------------------------------------------------------

CBD(Component Based Development)
: 컴포넌트 기반 개발 방식
MS에서 주도. 컴포넌트를 먼저 만든 다음 컴포넌트를 결합해서 SW를 완성하는 방식
=> Enterprise(대기업) Solution

EJB(Enterprise Java Beans)
=> java 진영에서는 component를 Beans로 구현. EJB로 CBD 개발

-----------------------------------------------------------------------------------------------------------------------

STRUTS, Spirng 같은 경량 프레임워크의 등장.

----------------------------------------------------------------------------------------------------------------------------

MyBastis
=> SQL처리담당. sql문을 ~mapper.xml에 저장해서 처리.

---------------------------------------------------------------------------

namespace : 이름공간
=> 자바의 패키지와 비슷한 역할. xml이나 c#에서는 namespace를 사용

----------------------------------------------------------------------------------

MyBatis 3.0

Mapper.xml의 <select> <insert> <update> <delete> 태그의 id와 같은 이름의 추상메서드를 ~Mapper interface 에 만든다.
=> Mapper인터페이스를 상속해서 추상메서드를 오버라이딩할 필요가 없다. 
   의존성주입(Injection)을 통해서 자동 생성된다.

---------------------------------------------------------------------------------------------
XML이나 Java설정 이용시에 설정 분리
XML은 기본, Java는 선택(그러나 최근 유행)

Servlet은 3.0이상으로 변경한다.

-------------------------------------------------------------------------------------------------

Controller
상속/인터페이스 방식 대신에 어노테이션(@)만으로도 필요한 설정 가능

@RequesetMapping의 변화
- 4.3이전 (@RequestMapping(method=get))
- 이후 @GetMapping, @PostMapping

Controller의 파라미터 수집
-> spring은 자동으로 VO을 생성한다.  lombok(@Data)을 사용

-------------------------------------------------------------------------------------------------------

스프링에서는 parameter수집이 강력하다.
=> 똑같은 이름이 있으면 수집. 없으면 만든다.

------------------------------------------------------------------------------------------------------

에러메세지 출력에 대해 생각해볼 이슈
1. end user들은 자세한 에러메세지를 보여주는 것 보다는 
 간단한 에러 상황에 대한 안내와 관리자 연락 정보등을 안내하는 것이 좋다.

2. 개발단계에서는 디버깅에 필여한 에러 메세지를 출력하고 
 배포할때는 endd user입장에서 필요한 메세지를 출력한다.

3. 여러 사람이 협업할 경우, 에러 메레지나 안내 메세지도 통일하는 것이 필요하다.
예) 게시글 등록 후 출력하는 메세지의 경우
	1. 가입되었습니다.
	2. 등록되었습니다
	3. 완료 되었습니다 
등 개발자마다 메세지가 통일 되지 않으면, 통합했을 때 메세지가 일관성이 없음

규모가 큰 프로젝트에서는 
메세지처리도 공통모듈로 작성
1. 테이블에 메세지를 저장해서 select해서 출력
2. 메세지 클래스를 만들어서 클래스 안에 ArrayList등에 메세지 저장해서 사용.

----------------------------------------------------------------------------------------

Coding Convention(코딩작성 규칙)
:팀 프로젝트시 각 개발자가 코딩을 작성하는 규칙
1. 주석다는 방법
2. 들여쓰기

Naming Rule(명명 규칙)
=>패키지 명, 클래스 명, 인터페이스명, 컴포넌트 명 등등의 이름을 작성하는 규칙
0. 한글 사용 금지
1. 클래스명 첫글자는 대문자로
2. 상수는 모두 대문자
3. 변수는 소문자로 시작
4. textfield는 txt로 시작 ex) txtName

** Naming Rule은 Code Convention에 포함 되기도 함.

-----------------------------------------------------------------------------------------------------------

게시판 작성 순서(spring)
Spring MVC패턴
1. table board 작성
2. VO model (lombok)
3. DAO에 table board에서 가져온 값을 BoardMapper에 전달 (interface)
4. Boardservice라는 인터페이스를 가져와서 BoardserviceImpl(class)에 전달
5. controller class (@controller)
6. jsp 작성 (view)

--------------------------------------------------------------------------------------------------------

채번
: 번호를 생성 / 채집한다.

A테이블에 insert후 시퀀스로 생성된 번호를 
B테이블에 넣어야하는 경우. 

------------------------------------------------------------------------------------------------------------

Oracle 

index
=> 검색 속도를 향상시키기 위해 사용.
** 데이터가 많아서 검색 속도가 느릴 때 사용.

1. index는 sorting된다. rowid를 가지고 있어서 rowid로 table의 데이터를 바로 찾아갈 수 있다. (seek : 바로 찾아가기)
2. index는 별도의 데이터가 생성됨. DB사이즈가 증가됨.
3. index는 검색 결과가 여러 개인 경우보다는 한 개를 찾을 때 유리.
 => 찾으려는 데이터의 분포가 15%이하 일 때 사용. (case by case)
 => 데이터의 분포가 달라지면? 쿼리 옵티마이저가 index를 사용하지 않는 것이 유리하다고 판단하면 index를 사용하지 않는다.
 => 오라클 hint (index hint는 쿼리 옵티마이저의 판단보다 우선시 됨)
4. index가 있으면 update, delete 속도는 느려질 수 있다.

--------------------------------------------------------------------------------------------------------

Simple한 코드가 좋다.
=> 읽기 쉬운 코드
1. 짧은 코드가 항상 좋은 것은 아니다.
2. 짧게 작성하려고 시작했는데 점점 로직이 복잡해지면, 
 좀 길어도 읽기 쉬운 코드가 좋다.

-------------------------------------------------------------------------------------------------------

게시판 구현시 필요한 parameter

1. bno: 글번호
2. pageNum : 페이지 번호
3. amount : 페이지 당 글 수
4. type : 검색필드
5. keyword : 검색

------------------------------------------------------------------------------------------------------

게시판 작성 순서
1. table 생성
2. VO 생성 (class, lombok)
3. DAO (Mapper로 DAO 역할을 대체)
 3-1 interface를 생성
 3-2 interface와 짝이 되는 Mapper.xml을 생성
 
4. Service (interface)
 4-1 interface 생성
 4-2 interface를 상속받는 serviceImpl(class)을 생성
5. Controller (@controller를 붙여야 한다. / ajax 사용시 @Restcontroller)
6. view (jsp) 생성

--------------------------------------------------------------------------------------------------------

Mapper를 사용하지 않고(lombok를 사용하지 않고.) DAO로 구현할 때 사용하는 method

1. 목록을 가져올 때,
session.selectList();

2. 한건을 가져올 때,
session.selectOne();

3. insert
session.insert();

4. update
session.update();

5. delete();
session.delete()

------------------------------------------------------------------------------------------------

주입 방법
@Autowired -> Spring
@Inject-> 표준
@Setter(onMethod_ = @ Autowired) -> lombok

---------------------------------------------------------------------------------------------------

javascript에서 함수의 이름은 reference이다.
C언어에서는 함수의 이름이 pointer.